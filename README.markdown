# svg4j

Svg4j is an optimizing and stacking tool for [Scalable Vector Graphics][svg],
written in [Java][java].

With SVGs being [heavily supported][caniuse-svg] on the web many may wish to
compress and package all of their SVG assets into a single optimized file. This
technique is known as using a [sprite-sheet][spritesheet]. This can be achieved
in SVG documents with the use of [SVG fragment identifiers][svg-fragments], a
method of rendering part of an SVG by defining a view ID and referring to it in
an `<img>` tag. This technique is [fairly supported][caniuse-svg-fragment] by
most modern browsers.

## Usage

### Direct

The tool can be applied directly on an input directory of SVGs by running the
[`Svg4j`](api/src/main/java/com/mikebull94/svg4j/Svg4j.java) class with the
following program arguments:

* `inputDir` - The input directory of SVGs (e.g.
  [`api/src/main/resources`](api/src/main/resources))
* `output` - The output file (e.g. `api/build/resources/main/output.svg`)
* `minX` - The minimum x-coordinate of the viewBox.
* `minY` - The minimum y-coordinate of the viewBox.
* `width` - The width of the viewBox in pixels.
* `height` - The height of the viewBox in pixels.

All together this example would create the following program arguments:

`api/src/main/resources api/build/resources/main/output.svg 0 0 500 500`

The [example SVGs](api/src/main/resources) included in the distribution are
variations of the [Wikimedia Community Logo][wikimedia-community-logo], licensed
for any purpose within the public domain.

### API

The API can be interacted with directly, as in the following example:

```java
ImmutableList<Path> input = ImmutableList.of(Paths.get("input_dir"));
Path output = Paths.get("output.svg");
SvgViewBox viewBox = new SvgViewBox(0, 0, 500, 500);

Svg4j stacker = Svg4j.createStacker(viewBox)
	.createSvgStart()
	.hideEmbeddedSvgs()
	.read(input)
	.svgEnd()
	.write(output);

System.out.println(stacker.size());
```

### Gradle Plugin

The API can also be accessed via via a [Gradle Plugin][gradle-plugin]:

```groovy
apply plugin: 'com.mikebull94.svg4j'

task stackSvgs(type: Svg4jTask) {
    inputDir = projectDir
    output = file('output.svg')
    viewBox = new SvgViewBox(0, 0, 500, 400)
}
```

## Building

[Gradle][gradle] is used as the project's build system. The [Gradle Wrapper]
[gradle-wrapper] is included in the distribution, therefore you do not need to
install Gradle on your system.

To build the program, run the tests, and generate Javadoc, run:

* `./gradlew` (on Unix-like platforms such as Linux and Mac OS X)
* `gradlew` (on Windows using the [gradlew.bat](gradlew.bat) batch file)

[FindBugs™][findbugs] and [PMD][pmd] are used to [lint][lint] the Java code and
will fail the build on rule violations.

## Testing

Tests are written in a [behaviour-driven-development][bdd] style and run using
[JUnit][junit] and [Mockito][mockito].

[Integration tests for the Gradle Plugin](gradle-plugin/src/integTest/java) run
using the [Gradle TestKit][gradle-testkit].

Code coverage reports for the [unit tests](api/src/test/java) are generated by
[JaCoCo][jacoco].

## Dependencies

* [Java][java] 8 or above
* [Google Guava][guava]
* [SLF4J][slf4j] for logging
* [JUnit][junit] for unit tests
* [Mockito][mockito] for unit tests
* [APIviz][apiviz] for UML-like class diagrams in the generated Javadoc
* [JaCoCo][jacoco] for code test coverage reports
* [FindBugs™][findbugs] for Java code linting
* [PMD][pmd] for Java code linting

## License

This project is available under the terms of the ISC license. See the
[`LICENSE`](LICENSE) file for the copyright information and licensing terms.

[svg]: https://www.w3.org/Graphics/SVG/
[java]: https://java.com
[caniuse-svg]: http://caniuse.com/#feat=svg
[spritesheet]: https://css-tricks.com/css-sprites/
[svg-fragments]: https://css-tricks.com/svg-fragment-identifiers-work/
[caniuse-svg-fragment]: http://caniuse.com/#feat=svg-fragment
[wikimedia-community-logo]: https://commons.wikimedia.org/wiki/File:Wikimedia_Community_Logo.svg
[gradle-plugin]: https://docs.gradle.org/current/userguide/plugins.html
[gradle]: https://gradle.org/
[gradle-wrapper]: https://docs.gradle.org/current/userguide/gradle_wrapper.html
[bdd]: https://en.wikipedia.org/wiki/Behavior-driven_development
[junit]: http://junit.org/
[mockito]: http://mockito.org/
[jacoco]: http://eclemma.org/jacoco/
[findbugs]: http://findbugs.sourceforge.net/
[pmd]: https://pmd.github.io/
[lint]: https://en.wikipedia.org/wiki/Lint_%28software%29
[mockito]: http://mockito.org/
[gradle-testkit]: https://docs.gradle.org/current/userguide/test_kit.html
[guava]: https://github.com/google/guava
[slf4j]: http://slf4j.org/
[junit]: http://junit.org/
[apiviz]: https://github.com/grahamedgecombe/apiviz
