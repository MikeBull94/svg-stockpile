# svg-stockpile

An optimizing and stacking tool for [Scalable Vector Graphics][svg], written in
[Java][java].

With SVGs being [heavily supported][caniuse-svg] on the web many may wish to
compress and package all of their SVG assets into a single optimized file. This
technique is known as using a [sprite-sheet][spritesheet]. This can be achieved
in SVG documents with the use of [SVG fragment identifiers][svg-fragments], a
method of rendering part of an SVG by defining a view ID and referring to it in
an `<img>` tag. This technique is [fairly supported][caniuse-svg-fragment] by
most modern browsers.

## Documentation

Javadocs are available for both the [API][api-javadoc] and the [Gradle Plugin]
[gradle-plugin-javadoc].

## Installation

This project is available in the [Maven Central Repository][maven-central]. The
artifacts are signed with my personal [GPG key][gpg].

### API

To install the API in a [Maven][maven] project, add the following dependency to
your `pom.xml` file:

```xml
<dependency>
  <groupId>com.mikebull94.svg-stockpile</groupId>
  <artifactId>api</artifactId>
  <version>1.0.0</version>
</dependency>
```

To install the API in a [Gradle][gradle] project, add the following dependency
to your `build.gradle` file:

```groovy
dependencies {
    compile group: 'com.mikebull94.svg-stockpile', name: 'api', version: '1.0.0'
}
```

### Gradle Plugin

To install the [Gradle Plugin][gradle-plugin] into your build lifecycle, add the
following code to your `build.gradle` file:

```groovy
import com.mikebull94.stockpile.svg.SvgViewBox

buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath group: 'com.mikebull94.svg-stockpile', name: 'gradle-plugin', version: '1.0.0'
    }
}

apply plugin: 'com.mikebull94.svg-stockpile'

stockpile {
    inputDir = projectDir
    output = file('output.svg')
    viewBox = new SvgViewBox(0, 0, 500, 500)
}

build.dependsOn stockpile
```

## Example

An [example class][example.java] is included to show how typical API interaction
is performed. It can be ran on a set of input SVGs such as the [Wikimedia
Community Logo variations][api-resources] distributed with this project, which
are [licensed][wikimedia-community-logo] for any purpose within the public
domain.

The example requires the following program arguments:

* `inputDir` - The input directory of SVGs (e.g.
  [`api/src/main/resources`][api-resources])
* `output` - The output file (e.g. `api/build/resources/main/output.svg`)
* `minX` - The minimum x-coordinate of the viewBox.
* `minY` - The minimum y-coordinate of the viewBox.
* `width` - The width of the viewBox in pixels.
* `height` - The height of the viewBox in pixels.

Correctly populated arguments should look similar to this:

<kbd>
  <kbd>api/src/main/resources</kbd>
  <kbd>api/build/resources/main/output.svg</kbd>
  <kbd>0 0 500 500</kbd>
</kbd>

## Building

[Gradle][gradle] is used as the project's build system. The [Gradle Wrapper]
[gradle-wrapper] is included in the distribution, therefore you do not need to
install Gradle on your system.

To build the program, run the tests, and generate Javadoc, run:

* `./gradlew` (on Unix-like platforms such as Linux and Mac OS X)
* `gradlew` (on Windows using the [gradlew.bat](gradlew.bat) batch file)

[FindBugsâ„¢][findbugs] and [PMD][pmd] are used to [lint][lint] the Java code and
will fail the build on rule violations.

## Testing

Tests are written in a [behaviour-driven-development][bdd] style and run using
[JUnit][junit] and [Mockito][mockito].

[Integration tests for the Gradle Plugin][gradle-plugin-integ-test] run using
the [Gradle TestKit][gradle-testkit].

Code coverage reports for the [unit tests][unit-tests] are generated by
[JaCoCo][jacoco].

## Dependencies

* [Java][java] 8 or above
* [Google Guava][guava]
* [SLF4J][slf4j] for logging
* [JUnit][junit] for unit tests
* [Mockito][mockito] for unit tests
* [APIviz][apiviz] for UML-like class diagrams in the generated Javadoc
* [Gradle TestKit][gradle-testkit] for integration tests

## License

This project is available under the terms of the ISC license. See the
[`LICENSE`](LICENSE) file for the copyright information and licensing terms.

[example.java]: api/src/main/example/com/mikebull94/stockpile/Example.java
[api-resources]: api/src/main/resources
[stockpiletask.java]: gradle-plugin/src/main/java/com/mikebull94/stockpile/gradle/StockpileTask
[unit-tests]: api/src/test/java

[svg]: https://www.w3.org/Graphics/SVG/
[java]: https://java.com
[caniuse-svg]: http://caniuse.com/#feat=svg
[spritesheet]: https://css-tricks.com/css-sprites/
[svg-fragments]: https://css-tricks.com/svg-fragment-identifiers-work/
[caniuse-svg-fragment]: http://caniuse.com/#feat=svg-fragment
[api-javadoc]: https://www.javadoc.io/doc/com.mikebull94.svg-stockpile/api/
[gradle-plugin-javadoc]: https://www.javadoc.io/doc/com.mikebull94.svg-stockpile/gradle-plugin/
[maven-central]: http://search.maven.org/
[gradle]: https://gradle.org/
[maven]: https://maven.apache.org/
[gpg]: https://michael-bull.com/gpg.asc
[wikimedia-community-logo]: https://commons.wikimedia.org/wiki/File:Wikimedia_Community_Logo.svg
[gradle-plugin]: https://docs.gradle.org/current/userguide/plugins.html
[gradle-wrapper]: https://docs.gradle.org/current/userguide/gradle_wrapper.html
[bdd]: https://en.wikipedia.org/wiki/Behavior-driven_development
[junit]: http://junit.org/
[mockito]: http://mockito.org/
[jacoco]: http://eclemma.org/jacoco/
[findbugs]: http://findbugs.sourceforge.net/
[pmd]: https://pmd.github.io/
[lint]: https://en.wikipedia.org/wiki/Lint_%28software%29
[mockito]: http://mockito.org/
[gradle-plugin-integ-test]: gradle-plugin/src/integTest/java/com/mikebull94/stockpile/gradle/StockpilePluginTest.java
[gradle-testkit]: https://docs.gradle.org/current/userguide/test_kit.html
[guava]: https://github.com/google/guava
[slf4j]: http://slf4j.org/
[junit]: http://junit.org/
[apiviz]: https://github.com/grahamedgecombe/apiviz
[gradle-testkit]: https://docs.gradle.org/current/userguide/test_kit.html
