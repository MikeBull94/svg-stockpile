plugins {
    id 'com.github.ben-manes.versions' version '0.12.0'
    id 'io.spring.dependency-management' version '0.5.6.RELEASE'
}

description = 'Svg4j is an optimizing and stacking tool Scalable Vector Graphics'

defaultTasks 'clean', 'build', 'aggregateJavadoc'

apply plugin: 'base'
apply plugin: 'wrapper'
apply plugin: 'com.github.ben-manes.versions'

wrapper {
    gradleVersion = '2.11'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            def rejected = [ 'alpha', 'beta', 'rc', 'cr', 'm' ].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }

            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

allprojects {
    apply plugin: 'io.spring.dependency-management'

    group = 'com.mikebull94'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        return dependencies {
            dependency group: 'com.google.guava', name: 'guava', version: '19.0'
            dependency group: 'junit', name: 'junit', version: '4.12'
            dependency group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
            dependencySet(group: 'org.slf4j', version: '1.7.18') {
                entry 'slf4j-api'
                entry 'slf4j-jdk14'
            }
        }
    }
}

configurations {
    doclet
}

dependencies {
    doclet group: 'com.grahamedgecombe.apiviz', name: 'apiviz', version: '1.3.3'
}

def version(dependency) {
    return dependencyManagement.managedVersions.get(dependency)
}

task aggregateJavadoc(type: Javadoc) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = 'Generates aggregated Javadoc API documentation for the main source code of all sub-projects.'

    title = project.name
    destinationDir = file("$buildDir/docs/javadoc")

    options {
        doclet = 'org.jboss.apiviz.APIviz'
        docletpath = configurations.doclet.files.asType(List)

        addBooleanOption('nopackagediagram', true)

        showAll()
        links 'https://docs.oracle.com/javase/8/docs/api/'
        links 'http://www.slf4j.org/api/'
        links "https://google.github.io/guava/releases/${version('com.google.guava:guava')}/api/docs/"

        group 'Utility library', 'com.mikebull94.svg4j.util*'
    }
}

gradle.projectsEvaluated {
    def javaSubProjects = subprojects.findAll { it.plugins.hasPlugin(JavaPlugin) }
    def aggregateJavadoc = rootProject.tasks.aggregateJavadoc

    def source = javaSubProjects.collect { it.javadoc.source }
    def classpath = files(javaSubProjects.collect { it.javadoc.classpath })
    def output = files(javaSubProjects.collect { it.sourceSets.main.output })

    aggregateJavadoc.source source
    aggregateJavadoc.classpath = classpath

    /* APIViz expects all -sourceclasspath directories to exist */
    output.each { dir -> dir.mkdirs() }

    /* APIviz expects the -sourceclasspath option to point to the location of the compiled .class files*/
    aggregateJavadoc.options.addStringOption('sourceclasspath', output.asPath)
}
