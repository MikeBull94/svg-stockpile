buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.12.0'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '1.2.3'
        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '0.5.6.RELEASE'
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.3.4'
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'net.researchgate.release'

    group = 'com.mikebull94.svg-stockpile'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencyManagement {
        dependencies {
            dependency group: 'com.google.guava', name: 'guava', version: '19.0'
            dependency group: 'com.grahamedgecombe.apiviz', name: 'apiviz', version: '1.3.3'
            dependency group: 'junit', name: 'junit', version: '4.12'
            dependency group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.6'
            dependency group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
            dependencySet(group: 'org.slf4j', version: '1.7.18') {
                entry 'slf4j-api'
                entry 'slf4j-jdk14'
            }
        }
    }
}

apply plugin: 'base'
apply plugin: 'wrapper'

description = 'An optimizing and stacking tool for Scalable Vector Graphics.'

defaultTasks 'clean', 'build', 'javadoc'

ext {
    versions = dependencyManagement.managedVersions
}

wrapper {
    gradleVersion = '2.12'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            def rejected = [ 'alpha', 'beta', 'rc', 'cr', 'm' ].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }

            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

afterReleaseBuild.dependsOn uploadArchives
